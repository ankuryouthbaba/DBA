USE [ADMIN]
GO

/****** Object:  StoredProcedure [dbo].[p_dba_Backup_Verification]    Script Date: 12/15/2021 11:13:50 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[p_dba_Backup_Verification]
( @sendMail BIT = 1
, @ToEmail NVARCHAR(1000)=''
, @Week INT = -4 -- 0 for last , -1 for last to last
, @FullCheck INT = 1
, @DiffCheck INT = 0
, @LogCheck INT = 0
, @SDbCheck INT = 1
, @FullBackupDays INT = -14
, @LogBackupDays INT = -14
, @DiffBackupDays INT = -14
, @SystemDBMonth INT = - 1
, @Path VARCHAR (1000) = ''
, @NumberOfPaths AS INTEGER ='2'

) 
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

DECLARE @HtmlMin VARCHAR(MAX)=''	, @HtmlMinFirstTable VARCHAR(MAX)=''	, @HtmlFillerTable VARCHAR(MAX)

	SET @HtmlFillerTable = '<HTML>
	<BR>
	<BR>
	</HTML>'	

IF OBJECT_ID('tempdb..#TempBackupTable')IS NOT NULL DROP TABLE #TempBackupTable;
IF OBJECT_ID('tempdb..#Tempbackupinfo')IS NOT NULL DROP TABLE #Tempbackupinfo;
IF OBJECT_ID('tempdb..#dbs')IS NOT NULL DROP TABLE #dbs;
IF OBJECT_ID('tempdb..#backupinfo')IS NOT NULL DROP TABLE #backupinfo;
IF OBJECT_ID('tempdb..#DirectoryTree')IS NOT NULL DROP TABLE #DirectoryTree;
IF OBJECT_ID('tempdb..#DB')IS NOT NULL DROP TABLE #DB;

create table #TempBackupTable ( [Database] sysname, 
							[Backup Start Date] Datetime,
							[backup_set_id]  Varchar(50),
							family_sequence_number INT ,
							[type] Varchar (10),
							physical_device_name Varchar (500)
						      )


create table #backupinfo (  [Database] sysname, 
						    [Backup] varchar (20),
							[Backup Start Date] Datetime,
							[Type]  Varchar(50),
							[Backup file name] Varchar (500),
							[File Avaliable on Location] Varchar (500),
							[Check Result] Varchar (100)
							)
													   							 
Declare @WeekEndDate DATETIME

SELECT @WeekEndDate = DATEADD(wk, @Week, DATEADD(wk, DATEDIFF(wk, 6, GETDATE()), 6))

Declare @fullbackupdate datetime, @Logbackupdate datetime, @diffbackupdate datetime, @Sysbackupdate datetime

SELECT @fullbackupdate = DATEADD(DAY, @FullBackupdays, DATEADD(DAY, DATEDIFF(DAY, 6, GETDATE()), 6))
SELECT @diffbackupdate = DATEADD(DAY, @DiffBackupdays, DATEADD(DAY, DATEDIFF(DAY, 6, GETDATE()), 6))
SELECT @Logbackupdate  = DATEADD(DAY, @LogBackupdays, DATEADD(day, DATEDIFF(day, 6, GETDATE()), 6))
SELECT @Sysbackupdate  = DATEADD(MONTH, @SystemDBMonth, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0))

Create table #dbs  (
ID INT IDENTITY(1,1) NOT NULL,
p_dbname sysname NOT NULL,
	)

DECLARE @db sysname,  @dbcount INT, @bkpcount INT, @dbs sysname

INSERT INTO #dbs (p_dbname)
	SELECT [name] from sys.databases


SET @dbcount = (SELECT COUNT (ID) FROM #dbs)
SET @bkpcount = (SELECT COUNT (ID) FROM #dbs)

WHILE @dbcount > 0 
BEGIN

	SET @db = ( SELECT TOP 1 p_dbname FROM #dbs WHERE ID = @dbcount)

INSERT INTO #TempBackupTable
SELECT DATABASE_NAME,backup_start_date,backup_set_id,family_sequence_number ,type,physical_device_name [backuplocation]
FROM msdb.dbo.backupset backupset 
LEFT JOIN  msdb.dbo.backupmediafamily backupmediafamily
ON backupmediafamily.media_set_id = backupset.media_set_id
WHERE backupset.backup_start_date >= @WeekEndDate and backupset.[DATABASE_NAME]  = @db

	SELECT @dbcount = @dbcount - 1


	END

SELECT *, RIGHT(physical_device_name, CHARINDEX('\', REVERSE(physical_device_name)) - 1) AS BackupFileName 
INTO #Tempbackupinfo
FROM #TempBackupTable

--select * from #TempBackupTable

IF OBJECT_ID('tempdb..#DirectoryTree')IS NOT NULL DROP TABLE #DirectoryTree;

CREATE TABLE #DirectoryTree ( id int IDENTITY(1,1) ,FileName nvarchar(512) ,depth int ,isfile bit);

Declare @pathcount int
,@Stripcount AS INTEGER = 1
,@temp_Count AS INTEGER = 1
,@singlepath varchar (500)
,@sqlcmd Varchar(2000)
,@Subcmd1 Varchar(2000)
,@Subcmd2 Varchar(2000)
,@Subcmd3 Varchar(2000)

WHILE @temp_Count <= @NumberOfPaths
BEGIN
				DECLARE @num INT
				SET @num  = @Stripcount 
				
				SELECT @singlepath = dbo.GetColumnValue (@Path, ';', @num) 

					INSERT #DirectoryTree (FileName,depth,isfile)
						EXEC sys.xp_dirtree @singlepath ,0,1
					
							SET @temp_Count = @temp_Count + 1
 						    SELECT @Stripcount = @Stripcount + 1
END

					create table #DB (
					[S.no] int IDENTITY(1,1),
					[Database] sysname,
					RecoveryModel varchar (15))

					insert into #DB
					select name,recovery_model_desc
					from sys.databases where name  not in ('tempdb','model')


Insert into #backupinfo ([Database],[Backup],[Backup Start Date],[Type], [Backup file name],[File Avaliable on Location] ,[Check Result])
select  DB.[Database],'Full',BC.[Backup Start Date],BC.type,BC.Backupfilename 
,CASE WHEN dt.[filename] IS NULL THEN 'N\A' ELSE dt.[filename] END 
,CASE WHEN dt.[filename] IS NULL THEN 'File Not Avaliable' ELSE 'File Avaliable on Physical Device' END
from #DB DB
left join #Tempbackupinfo BC
on DB.[Database] = BC.[Database]
left join #DirectoryTree DT
on bc.Backupfilename =dt.filename
where (bc.Type = 'D' or bc.type is null ) 
and ([Backup Start Date] >= @fullbackupdate or [Backup Start Date] is null ) 
and DB.[Database] not in ('Master','msdb')
group by DB.[Database],[Backup Start Date],type,Backupfilename,FileName
order by DB.[Database] asc


Insert into #backupinfo ([Database],[Backup],[Backup Start Date],[Type], [Backup file name],[File Avaliable on Location] ,[Check Result])
select  DB.[Database],'Differential',BC.[Backup Start Date],BC.type,BC.Backupfilename 
,CASE WHEN dt.[filename] IS NULL THEN 'N\A' ELSE dt.[filename] END 
,CASE WHEN dt.[filename] IS NULL THEN 'File Not Avaliable' ELSE 'File Avaliable on Physical Device' END
from #DB DB
left join #Tempbackupinfo BC
on DB.[Database] = BC.[Database]
left join #DirectoryTree DT
on bc.Backupfilename =dt.filename
where (bc.Type = 'I' or bc.type is null ) 
and ([Backup Start Date] >= @diffbackupdate or [Backup Start Date] is null ) 
and DB.[Database] not in ('Master','msdb')
group by DB.[Database],[Backup Start Date],type,Backupfilename,FileName
order by DB.[Database] asc


WHILE @bkpcount > 0 
BEGIN

	SET @dbs = ( SELECT TOP 1 p_dbname FROM #dbs WHERE ID = @bkpcount)
	   	 

			Insert into #backupinfo ([Database],[Backup],[Backup Start Date],[Type], [Backup file name],[File Avaliable on Location] ,[Check Result])
			select top 1  DB.[Database],'Log',BC.[Backup Start Date],BC.type,BC.Backupfilename 
			,CASE WHEN dt.[filename] IS NULL THEN 'N\A' ELSE dt.[filename] END 
			,CASE WHEN dt.[filename] IS NULL THEN 'File Not Avaliable' ELSE 'File Avaliable on Physical Device' END
			from #DB DB
			left join #Tempbackupinfo BC
			on DB.[Database] = BC.[Database]
			left join #DirectoryTree DT
			on bc.Backupfilename =dt.filename
			where (bc.Type = 'L' or bc.type is null ) 
			and ([Backup Start Date] >= @logbackupdate or [Backup Start Date] is null ) 
			and (DB.[Database] = @dbs and DB.RecoveryModel <> 'simple')
			group by DB.[Database],[Backup Start Date],type,Backupfilename,FileName
			order by [Backup Start Date] asc


			Insert into #backupinfo ([Database],[Backup],[Backup Start Date],[Type], [Backup file name],[File Avaliable on Location] ,[Check Result])
			select  top 1  DB.[Database],'Log',BC.[Backup Start Date],BC.type,BC.Backupfilename 
			,CASE WHEN dt.[filename] IS NULL THEN 'N\A' ELSE dt.[filename] END 
			,CASE WHEN dt.[filename] IS NULL THEN 'File Not Avaliable' ELSE 'File Avaliable on Physical Device' END
			from #DB DB
			left join #Tempbackupinfo BC
			on DB.[Database] = BC.[Database]
			left join #DirectoryTree DT
			on bc.Backupfilename =dt.filename
			where (bc.Type = 'L' or bc.type is null ) 
			and ([Backup Start Date] >= @logbackupdate or [Backup Start Date] is null ) 
			and ( DB.[Database] = @dbs and DB.RecoveryModel <> 'simple')
			group by DB.[Database],[Backup Start Date],type,Backupfilename,FileName
			order by [Backup Start Date] desc

	SELECT @bkpcount = @bkpcount - 1
	
END

		
	IF @FullCheck=1
			BEGIN
							
			if OBJECT_ID(N'tempdb..#fullbackup') is not null drop table #fullbackup
			
		    Declare @Dashboard_Count_Full int= 0
		    Declare @caption_fullbackupinfo varchar(1000)  ='History and Retention of Full Backups'

			select [Database],[Backup],cast ([Backup Start Date] as varchar(50)) [Backup Start Date],[Type],[Backup file name],[File Avaliable on Location],[Check Result] 
			into #fullbackup
			from #backupinfo where (type = 'D' or type is null and [Backup] = 'Full') order by [Database] asc

			SELECT @Dashboard_Count_Full = @@ROWCOUNT
			SELECT * FROM #fullbackup
			
		END
			
	IF ( @Dashboard_Count_Full >=1 AND @FullCheck=1)
			BEGIN
				DECLARE @Html_Title_fullinfo VARCHAR(MAX)='',@Html_fullinfo VARCHAR(MAX)=''
				DECLARE @SQLText_fullinfo AS VARCHAR(MAX)=  'select * from #fullbackup'
				EXECUTE  dbo.p_DBA_ConvertTableToHtml @SQLText_fullinfo,@Html_fullinfo OUTPUT   
				SET @Html_Title_fullinfo = '<html><p><u><strong><span style="background-color:#eeeeee;">' + @caption_fullbackupinfo + '</span></strong></u></p></body></html>'
				SET @HtmlMin = @Html_Title_fullinfo + @Html_fullinfo 
			END
		ELSE IF (@FullCheck=0)
			BEGIN
				SET @HtmlMin = @HtmlMin --+ @HtmlFillerTable
			END
		ELSE
			BEGIN
				SET @Html_Title_fullinfo = '<html><p><u><strong><span style="background-color:#eeeeee;">' + @caption_fullbackupinfo + '</span></strong></u></p></body></html>'
				SET @HtmlMin = @HtmlMin + @HtmlFillerTable + @Html_Title_fullinfo + @HtmlFillerTable
			END	


IF @DiffCheck = 1
	BEGIN					
		if OBJECT_ID(N'tempdb..#Diffbackup') is not null drop table #Diffbackup
			
		    Declare @Dashboard_diff_info int= 0
		    Declare @caption_diff_info varchar(1000)  ='History and Retention of Differential Backups'
			
			select [Database],[Backup],cast ([Backup Start Date] as varchar(50)) [Backup Start Date],[Type],[Backup file name],[File Avaliable on Location],[Check Result] 
			into #Diffbackup
			from #backupinfo where (type = 'I' or type is null and [Backup] = 'Differential') order by [Database] asc

			SELECT @Dashboard_diff_info = @@ROWCOUNT
			SELECT * FROM #Diffbackup
			
		END
			
	IF (@Dashboard_diff_info >=1 AND @DiffCheck =1)
			BEGIN
				DECLARE @Html_Title_diff_info VARCHAR(MAX)='',@Html_diff_info VARCHAR(MAX)=''
				DECLARE @SQLText_diff_info AS VARCHAR(MAX)=  'select * from #Diffbackup'
				EXECUTE  dbo.p_DBA_ConvertTableToHtml @SQLText_diff_info,@Html_diff_info OUTPUT   
				SET @Html_Title_diff_info = '<html><p><u><strong><span style="background-color:#eeeeee;">' + @caption_diff_info + '</span></strong></u></p></body></html>'
				SET @HtmlMin =  @HtmlMin + @HtmlFillerTable + @Html_Title_diff_info + @Html_diff_info 
			END
		ELSE IF (@DiffCheck =0)
			BEGIN
				SET @HtmlMin = @HtmlMin --+ @HtmlFillerTable
			END
		ELSE
			BEGIN
				SET @Html_Title_diff_info = '<html><p><u><strong><span style="background-color:#eeeeee;">' + @caption_diff_info + '</span></strong></u></p></body></html>'
				SET @HtmlMin = @HtmlMin + @HtmlFillerTable + @Html_Title_diff_info + @HtmlFillerTable
			END		

	IF @LogCheck	=1
			BEGIN
							
			if OBJECT_ID(N'tempdb..#logbackup') is not null drop table #logbackup
			
		    Declare @Dashboard_log_info int= 0
		    Declare @caption_log_info varchar(1000)  ='History and Retention of Log Backups'

			select [Database],[Backup],cast ([Backup Start Date] as varchar(50)) [Backup Start Date],[Type],[Backup file name],[File Avaliable on Location],[Check Result] 
			into #logbackup
			from #backupinfo where (type = 'L' or type is null and [Backup] = 'Log') order by [Database] asc

			SELECT @Dashboard_log_info = @@ROWCOUNT

			SELECT * FROM #logbackup
			
		END
			
	IF (@Dashboard_log_info >=1 AND @LogCheck=1)
			BEGIN
				DECLARE @Html_Title_log_info VARCHAR(MAX)='',@Html_log_info VARCHAR(MAX)=''
				DECLARE @SQLText_log_info AS VARCHAR(MAX)=  'select * from #logbackup'
				EXECUTE  dbo.p_DBA_ConvertTableToHtml @SQLText_log_info,@Html_log_info OUTPUT   
				SET @Html_Title_log_info = '<html><p><u><strong><span style="background-color:#eeeeee;">' + @caption_log_info + '</span></strong></u></p></body></html>'
				SET @HtmlMin = @HtmlMin + @HtmlFillerTable + @Html_Title_log_info + @Html_log_info 
			END
		ELSE IF (@LogCheck=0)
			BEGIN
				SET @HtmlMin = @HtmlMin --+ @HtmlFillerTable
			END
		ELSE
			BEGIN
				SET @Html_Title_log_info = '<html><p><u><strong><span style="background-color:#eeeeee;">' + @caption_log_info + '</span></strong></u></p></body></html>'
				SET @HtmlMin = @HtmlMin + @HtmlFillerTable + @Html_Title_log_info + @HtmlFillerTable
			END	

			
Declare @p_recipients AS VARCHAR(5000)		
SELECT @p_recipients= info_value
FROM [tb_info] 
WHERE [Info_Key]=@ToEmail

Select @ToEmail, @p_recipients

/*******************************************BUSINESS LOGIC ENDS***********************************************/

/******************************************SEND MAIL LOGIC STARTS*********************************************/

IF (@sendMail =0 AND @ToEmail <>'')
	BEGIN
		RAISERROR('If we need to send email , we must keep the value of the parameter @sendemail as 1...', 16, 1)WITH NOWAIT;
		RETURN
	END


IF (@sendMail =1 ) 

BEGIN

IF (@sendMail =1 AND @ToEmail ='')
	BEGIN
		RAISERROR('If the value of the parameter @sendemail is 1, we need to specify email address in the @ToEmail parameter 
					else keep the @sendemail=0 and ToEmail=NULL or blank..', 16, 1)WITH NOWAIT;
	RETURN
	END
				DECLARE @Profile_Name sysname
				DECLARE  @HtmlMail AS VARCHAR(MAX)
				DECLARE @p_subject AS VARCHAR(500)
				Declare @P_SERVERNAME VARCHAR(500)
				SELECT @P_SERVERNAME = INFO_VALUE FROM tb_info WHERE INFO_KEY = 'SERVERNAME'
				
				SET @HtmlMin = REPLACE(@HtmlMin,'&lt;','<')
				SET @HtmlMin = REPLACE(@HtmlMin,'&gt;','>')

				SET @HtmlMail = @HtmlMin
				SET @p_subject = @P_SERVERNAME +' (Report)'+ ' -- Backup Verification ' +  '('+ 'DBA Mail -'+' ' + CONVERT(VARCHAR, getdate(), 9) + ')'
				


				SELECT @Profile_Name= info_value
				FROM [tb_info] 
				WHERE [Info_Key]= 'Current-DBA-Profile-Name'
				
				set @p_recipients = ISNULL(@p_recipients, @ToEmail)

				EXEC msdb.dbo.SP_SEND_DBMAIL
					   @Profile_name=@Profile_Name
					  ,@recipients	= @p_recipients 
					  ,@subject		= @p_subject
					  ,@body		= @HtmlMail
					  ,@body_format = 'html'	
			
	END

----/*******************************************SEND MAIL LOGIC ENDS***********************************************/
--END TRY
------/*******************************************BEGIN CATCH********************************************************/
--BEGIN CATCH
--	EXEC p_dba_Call_SqlErrorlog @ObjectID = @@PROCID;
--END CATCH
GO



USE [Admin]
GO

/****** Object:  StoredProcedure [dbo].[p_dba_show_systeminformation]    Script Date: 11/26/2021 9:34:09 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[p_dba_show_systeminformation] @sendMail bit =0, @ToEmail varchar(500) = ''
with recompile
AS
/*******************************************************************
File Name:p_dba_show_systeminformation_beta.sql
Proc Name:p_dba_show_systeminformation_beta
Author   :
History: 

Create a new stored procedures to show system information
--EXEC ADMIN..p_dba_show_systeminformation_beta _beta_beta @sendMail =1, @ToEmail = ''
**********************************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

--Try Catch Block Start here
BEGIN TRY

	--Business Logic start here
IF OBJECT_ID('tempdb..#tempSQLChecks', 'U') IS NOT NULL
DROP TABLE #tempSQLChecks

IF OBJECT_ID('tempdb..#TEMP1', 'U') IS NOT NULL
DROP TABLE #TEMP1

CREATE TABLE #TEMP1 (COMMANDOUTPUT VARCHAR(100))
CREATE TABLE #tempSQLChecks (Check_ID int identity, CheckName varchar(500) null, Value varchar(100))

IF OBJECT_ID('tempdb..#system_time_table', 'U') IS NOT NULL
DROP TABLE #system_time_table
IF OBJECT_ID('tempdb..#restartinfo', 'U') IS NOT NULL
DROP TABLE #restartinfo


CREATE TABLE #restartinfo (Check_ID int identity, CheckName varchar(500) null, Value varchar(100))
CREATE TABLE #system_time_table (commandoutput varchar(2000))
DECLARE @ServerRestartTime datetime,@LastRestartThreshold varchar(15)='2-90',@LastminRestartThreshold varchar(15)='2',@LastmaxRestartThreshold varchar(15)='90',@DelaydaySql varchar(15)
,@osrestart varchar(30) ,@Delaydaywindows varchar(30) 

INSERT INTO #system_time_table EXEC MASTER..xp_cmdshell 'net statistics workstation' --exec ('xp_cmdshell ''systeminfo''') 
SELECT @ServerRestartTime = login_time FROM master.dbo.sysprocesses WHERE spid = 1
SELECT @DelaydaySql=Datediff(DAY, @ServerRestartTime, getdate())
SELECT @osrestart= CAST(CAST(rtrim(ltrim(replace(commandoutput, 'Statistics since ' , '') ) ) AS DATETIME) AS VARCHAR) FROM #system_time_table 
where commandoutput like '%Statistics since%'--CAST(CAST(REPLACE(LTRIM(RTRIM(RIGHT(COMMANDOUTPUT,25))),',','') AS DATETIME) AS VARCHAR) FROM #system_time_table where commandoutput like 'System Boot Time:%'
--SELECT @osrestart=(SELECT rtrim(ltrim(replace(commandoutput, 'Statistics since ' , '') ) ) FROM #system_time_table 
--where commandoutput like '%Statistics since%')--CAST(CAST(REPLACE(LTRIM(RTRIM(RIGHT(COMMANDOUTPUT,25))),',','') AS DATETIME) AS VARCHAR) FROM #system_time_table where commandoutput like 'System Boot Time:%'

SELECT @DELAYDAYWINDOWS=DATEDIFF(DAY, @OSRESTART, GETDATE())

INSERT INTO #TEMP1
SELECT 
CASE 
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '8%' THEN 'SQL2000'
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '9%' THEN 'SQL2005'
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '10.0%' THEN 'SQL2008'
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '10.5%' THEN 'SQL2008 R2'
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '11%' THEN 'SQL2012'
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '12%' THEN 'SQL2014'
     WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '13%' THEN 'SQL2016'     
     ELSE 'unknown'
END

INSERT INTO #tempSQLChecks
SELECT 'SQL Server Major Version',CONVERT(VARCHAR(200),COMMANDOUTPUT)
FROM #TEMP1

DECLARE @ProductLevel TABLE(ProductLevel VARCHAR(255));

INSERT INTO @ProductLevel
EXEC ('SELECT CONVERT(VARCHAR(200),SERVERPROPERTY(''ProductLevel''))') 

INSERT INTO #tempSQLChecks
SELECT  'SQL Server Product Level',ProductLevel from @ProductLevel

DECLARE @Edition TABLE(Edition VARCHAR(255));

INSERT INTO @Edition
EXEC ('SELECT CONVERT(VARCHAR(200),SERVERPROPERTY(''Edition''))')

INSERT INTO #tempSQLChecks
SELECT  'SQL Server Edition',Edition from @Edition

DECLARE @IsClustered TABLE(IsClustered VARCHAR(255));

INSERT INTO @IsClustered
EXEC ('SELECT CONVERT(VARCHAR(200),SERVERPROPERTY(''IsClustered''))')

INSERT INTO #tempSQLChecks
SELECT  'Is_Clustered',IsClustered from @IsClustered

DECLARE @ActiveNode TABLE(ActiveNode VARCHAR(255));

INSERT INTO @ActiveNode 
EXEC ('SELECT CONVERT(VARCHAR(200),SERVERPROPERTY(''ComputerNamePhysicalNetBIOS''))')

INSERT INTO #tempSQLChecks
SELECT  'ActiveNode',ActiveNode from @ActiveNode

DECLARE @ProductVersion TABLE(ProductVersion VARCHAR(255));

INSERT INTO @ProductVersion 
EXEC ('SELECT CONVERT(VARCHAR(200),SERVERPROPERTY(''ProductVersion''))')

INSERT INTO #tempSQLChecks
SELECT  'SQL Server ProductVersion',ProductVersion from @ProductVersion

INSERT INTO #tempSQLChecks
SELECT 'Blocked process threshold', convert(varchar(200),value)
from [master].[sys].[configurations] where name = 'blocked process threshold (s)'

INSERT INTO #tempSQLChecks
SELECT DESCRIPTION, convert(varchar(200),value)
from [master].[sys].[configurations] where name = 'cost threshold for parallelism'	
	
INSERT INTO #tempSQLChecks
SELECT DESCRIPTION, convert(varchar(200),value)
from [master].[sys].[configurations] where name = 'max degree of parallelism'

INSERT INTO #tempSQLChecks
SELECT DESCRIPTION, convert(varchar(200),value)
from [master].[sys].[configurations] where name = 'min server memory (MB)'

INSERT INTO #tempSQLChecks
SELECT DESCRIPTION, convert(varchar(200),value)
from [master].[sys].[configurations] where name = 'max server memory (MB)'

INSERT INTO #tempSQLChecks
SELECT 'Total_Physical_Memory_In_MB', convert(varchar(200),[total_physical_memory_kb] / 1024 )
FROM [master].[sys].[dm_os_sys_memory]

INSERT INTO #tempSQLChecks
SELECT 'Logical CPUs', CONVERT(VARCHAR(200),cpu_count)
FROM [master].[sys].[dm_os_sys_info]

INSERT INTO #tempSQLChecks
SELECT 'No of tempdb files', CONVERT(VARCHAR(200),COUNT(*))
FROM  [tempdb].[sys].[database_files] WHERE [type]=0

INSERT INTO #tempSQLChecks 
SELECT 'Last Server Restart (SQL)',@ServerRestartTime

INSERT INTO #tempSQLChecks 
SELECT 'Last Server Restart (Windows)',@osrestart

INSERT INTO #tempSQLChecks
SELECT 'Last Restart Threshold',@LastRestartThreshold

INSERT INTO #tempSQLChecks 
SELECT 'Delay Days (SQL)',@DelaydaySql

INSERT INTO #tempSQLChecks 
SELECT 'Delay Days (Windows)',@Delaydaywindows

IF OBJECT_ID('tempdb..#tempSQLChecks_interfinal', 'U') IS NOT NULL
DROP TABLE #tempSQLChecks_interfinal

select * into #tempSQLChecks_interfinal from #tempSQLChecks order by Check_ID asc

IF OBJECT_ID('tempdb..##tempSQLChecks_final', 'U') IS NOT NULL
DROP TABLE ##tempSQLChecks_final

SELECT * into ##tempSQLChecks_final
FROM #tempSQLChecks_interfinal 

SELECT * FROM ##tempSQLChecks_final
--Business Logic end here
END TRY
BEGIN CATCH	
	EXEC p_dba_Call_SqlErrorlog @ObjectID = @@PROCID;
END CATCH------Try Catch Block End Here


IF (@sendMail =0 AND @ToEmail <>'')
	BEGIN
		RAISERROR('If we need to send email , we must keep the value of the parameter @sendemail as 1...', 16, 1)WITH NOWAIT;
		RETURN
	END

IF (@sendMail =1 ) 

BEGIN

IF (@sendMail =1 AND @ToEmail ='')
	BEGIN
		RAISERROR('If the value of the parameter @sendemail is 1, we need to specify email address in the @ToEmail parameter 
					else keep the @sendemail=0 and ToEmail=NULL or blank..', 16, 1)WITH NOWAIT;
	RETURN
	END

	DECLARE @P_SERVERNAME VARCHAR(100)
	DECLARE @Profile_Name VARCHAR(100)
	DECLARE @p_subject AS VARCHAR(500)

	DECLARE @Html AS VARCHAR(5000)
	DECLARE @Html_Title AS VARCHAR(5000)
	DECLARE @Html_systemTable AS VARCHAR(5000)
	DECLARE @SQL_TEXT_system AS VARCHAR(5000)

	SELECT @P_SERVERNAME = INFO_VALUE FROM TB_INFO WHERE INFO_KEY = 'SERVERNAME'
	SELECT @Profile_Name= info_value FROM [tb_info] WHERE [Info_Key]= 'Current-DBA-Profile-Name'
	SELECT @SQL_TEXT_system =  'SELECT * FROM #tempSQLChecks'
	SELECT @p_subject =  @P_SERVERNAME +' (Report) '+ '-- SQL Server Configuration Information' + '('+ 'DBA Mail -'+' ' + CONVERT(VARCHAR, getdate(), 9) + ')'	
	SELECT @Html_Title = '<html><p><u><strong><span style="background-color:#eeeeee;"> SQL Server Configuration Information </span></strong></u></p> <br> </body></html>'

	EXECUTE  dbo.p_DBA_ConvertTableToHtml @SQL_TEXT_system,@Html_systemTable OUTPUT   

	SELECT @Html  = @Html_Title + @Html_systemTable

	EXEC msdb.dbo.SP_SEND_DBMAIL
			@Profile_name=@Profile_Name
			,@recipients	= @ToEmail 
			,@subject		= @p_subject
			,@body		= @Html
			,@body_format = 'html'	


END
GO

